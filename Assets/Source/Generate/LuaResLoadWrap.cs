//this source code was auto-generated by tolua#, do not modify it
using System;
using LuaInterface;

public class LuaResLoadWrap
{
	public static void Register(LuaState L)
	{
		L.BeginClass(typeof(LuaResLoad), typeof(System.Object));
		L.RegFunction("GetStaticRes", GetStaticRes);
		L.RegFunction("UnLoadSingleABFile", UnLoadSingleABFile);
		L.RegFunction("UnLoadABFiles", UnLoadABFiles);
		L.RegFunction("UnLoadAllABFiles", UnLoadAllABFiles);
		L.RegFunction("UnLoadSingleBundle", UnLoadSingleBundle);
		L.RegFunction("UnLoadAllBundle", UnLoadAllBundle);
		L.RegFunction("UnLoadAllBundleAndABFils", UnLoadAllBundleAndABFils);
		L.RegFunction("New", _CreateLuaResLoad);
		L.RegFunction("__tostring", ToLua.op_ToString);
		L.RegVar("mIns", get_mIns, set_mIns);
		L.RegVar("LResCallBackManager", get_LResCallBackManager, null);
		L.RegVar("Instance", get_Instance, null);
		L.EndClass();
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int _CreateLuaResLoad(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			if (count == 0)
			{
				LuaResLoad obj = new LuaResLoad();
				ToLua.PushObject(L, obj);
				return 1;
			}
			else
			{
				return LuaDLL.luaL_throw(L, "invalid arguments to ctor method: LuaResLoad.New");
			}
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int GetStaticRes(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 4);
			string arg0 = ToLua.CheckString(L, 1);
			string arg1 = ToLua.CheckString(L, 2);
			string arg2 = ToLua.CheckString(L, 3);
			bool arg3 = LuaDLL.luaL_checkboolean(L, 4);
			LuaResLoad.GetStaticRes(arg0, arg1, arg2, arg3);
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int UnLoadSingleABFile(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 4);
			LuaResLoad obj = (LuaResLoad)ToLua.CheckObject<LuaResLoad>(L, 1);
			string arg0 = ToLua.CheckString(L, 2);
			string arg1 = ToLua.CheckString(L, 3);
			string arg2 = ToLua.CheckString(L, 4);
			obj.UnLoadSingleABFile(arg0, arg1, arg2);
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int UnLoadABFiles(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 3);
			LuaResLoad obj = (LuaResLoad)ToLua.CheckObject<LuaResLoad>(L, 1);
			string arg0 = ToLua.CheckString(L, 2);
			string arg1 = ToLua.CheckString(L, 3);
			obj.UnLoadABFiles(arg0, arg1);
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int UnLoadAllABFiles(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			LuaResLoad obj = (LuaResLoad)ToLua.CheckObject<LuaResLoad>(L, 1);
			string arg0 = ToLua.CheckString(L, 2);
			obj.UnLoadAllABFiles(arg0);
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int UnLoadSingleBundle(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 3);
			LuaResLoad obj = (LuaResLoad)ToLua.CheckObject<LuaResLoad>(L, 1);
			string arg0 = ToLua.CheckString(L, 2);
			string arg1 = ToLua.CheckString(L, 3);
			obj.UnLoadSingleBundle(arg0, arg1);
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int UnLoadAllBundle(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			LuaResLoad obj = (LuaResLoad)ToLua.CheckObject<LuaResLoad>(L, 1);
			string arg0 = ToLua.CheckString(L, 2);
			obj.UnLoadAllBundle(arg0);
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int UnLoadAllBundleAndABFils(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			LuaResLoad obj = (LuaResLoad)ToLua.CheckObject<LuaResLoad>(L, 1);
			string arg0 = ToLua.CheckString(L, 2);
			obj.UnLoadAllBundleAndABFils(arg0);
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_mIns(IntPtr L)
	{
		try
		{
			ToLua.PushObject(L, LuaResLoad.mIns);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_LResCallBackManager(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			LuaResLoad obj = (LuaResLoad)o;
			LuaResCallBackNodeMangaer ret = obj.LResCallBackManager;
			ToLua.PushObject(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index LResCallBackManager on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_Instance(IntPtr L)
	{
		try
		{
			ToLua.PushObject(L, LuaResLoad.Instance);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_mIns(IntPtr L)
	{
		try
		{
			LuaResLoad arg0 = (LuaResLoad)ToLua.CheckObject<LuaResLoad>(L, 2);
			LuaResLoad.mIns = arg0;
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}
}

