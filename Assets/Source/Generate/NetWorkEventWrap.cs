//this source code was auto-generated by tolua#, do not modify it
using System;
using LuaInterface;

public class NetWorkEventWrap
{
	public static void Register(LuaState L)
	{
		L.BeginEnum(typeof(NetWorkEvent));
		L.RegVar("TcpConnect", get_TcpConnect, null);
		L.RegVar("TcpSendMsg", get_TcpSendMsg, null);
		L.RegVar("UdpConnect", get_UdpConnect, null);
		L.RegVar("UdpSendMsg", get_UdpSendMsg, null);
		L.RegVar("MaxValue", get_MaxValue, null);
		L.RegFunction("IntToEnum", IntToEnum);
		L.EndEnum();
		TypeTraits<NetWorkEvent>.Check = CheckType;
		StackTraits<NetWorkEvent>.Push = Push;
	}

	static void Push(IntPtr L, NetWorkEvent arg)
	{
		ToLua.Push(L, arg);
	}

	static bool CheckType(IntPtr L, int pos)
	{
		return TypeChecker.CheckEnumType(typeof(NetWorkEvent), L, pos);
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_TcpConnect(IntPtr L)
	{
		ToLua.Push(L, NetWorkEvent.TcpConnect);
		return 1;
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_TcpSendMsg(IntPtr L)
	{
		ToLua.Push(L, NetWorkEvent.TcpSendMsg);
		return 1;
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_UdpConnect(IntPtr L)
	{
		ToLua.Push(L, NetWorkEvent.UdpConnect);
		return 1;
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_UdpSendMsg(IntPtr L)
	{
		ToLua.Push(L, NetWorkEvent.UdpSendMsg);
		return 1;
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_MaxValue(IntPtr L)
	{
		ToLua.Push(L, NetWorkEvent.MaxValue);
		return 1;
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int IntToEnum(IntPtr L)
	{
		int arg0 = (int)LuaDLL.lua_tonumber(L, 1);
		NetWorkEvent o = (NetWorkEvent)arg0;
		ToLua.Push(L, o);
		return 1;
	}
}

